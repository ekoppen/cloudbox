{
  "name": "AI Chat Application",
  "description": "Complete setup voor AI chat applicaties (zoals Aimy) met gebruikers, conversations en AI integration",
  "category": "ai-app",
  "framework": "universal",
  "scripts": [
    {
      "id": "ai-chat-users",
      "name": "Create Chat Users Table",
      "description": "Gebruikers voor AI chat applicatie",
      "type": "sql",
      "run_order": 1,
      "content": "-- AI Chat Users Table\nCREATE TABLE IF NOT EXISTS {{table_prefix}}users (\n    id VARCHAR(50) PRIMARY KEY,\n    name VARCHAR(100),\n    phone VARCHAR(20),\n    email VARCHAR(100),\n    preferred_platform VARCHAR(20) DEFAULT 'web',\n    preferred_language VARCHAR(5) DEFAULT 'nl',\n    timezone VARCHAR(50) DEFAULT 'Europe/Amsterdam',\n    \n    -- User preferences\n    notification_preferences JSONB DEFAULT '{\"enabled\": true, \"quiet_hours\": {\"start\": \"22:00\", \"end\": \"08:00\"}}',\n    ai_personality JSONB DEFAULT '{\"tone\": \"friendly\", \"style\": \"helpful\"}',\n    context_preferences JSONB DEFAULT '{\"remember_topics\": true, \"personalization\": true}',\n    \n    -- Profile data\n    user_profile JSONB DEFAULT '{}',\n    goals JSONB DEFAULT '[]',\n    interests JSONB DEFAULT '[]',\n    current_streak JSONB DEFAULT '{\"days\": 0, \"type\": \"general\", \"last_checkin\": null}',\n    \n    -- Privacy and consent\n    onboarding_completed BOOLEAN DEFAULT false,\n    privacy_consent BOOLEAN DEFAULT false,\n    data_retention_days INTEGER DEFAULT 365,\n    \n    -- Metadata\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \n    INDEX idx_phone (phone),\n    INDEX idx_platform (preferred_platform),\n    INDEX idx_last_active (last_active)\n);\n\n-- Insert test user\nINSERT IGNORE INTO {{table_prefix}}users (id, name, phone, preferred_platform) \nVALUES ('test-user', 'Test Gebruiker', '+31612345678', 'web');\n\nSELECT 'AI Chat Users table created successfully' as result;"
    },
    {
      "id": "ai-chat-conversations",
      "name": "Create Conversations Table",
      "description": "Opslag voor alle AI chat conversations",
      "type": "sql", 
      "run_order": 2,
      "dependencies": ["ai-chat-users"],
      "content": "-- AI Chat Conversations Table\nCREATE TABLE IF NOT EXISTS {{table_prefix}}conversations (\n    id BIGINT AUTO_INCREMENT PRIMARY KEY,\n    conversation_id VARCHAR(50) NOT NULL,\n    user_id VARCHAR(50),\n    \n    -- Message data\n    platform VARCHAR(20) NOT NULL,\n    message_text TEXT,\n    response_text TEXT,\n    message_type VARCHAR(20) DEFAULT 'text',\n    \n    -- Attachments and media\n    attachments JSONB DEFAULT '[]',\n    media_urls JSONB DEFAULT '[]',\n    \n    -- AI analysis\n    intent_detected VARCHAR(50),\n    sentiment_score DECIMAL(3,2),\n    confidence_score DECIMAL(3,2),\n    topics JSONB DEFAULT '[]',\n    keywords JSONB DEFAULT '[]',\n    \n    -- AI model info\n    model_used VARCHAR(50),\n    tokens_used INTEGER,\n    cost_estimate DECIMAL(10,6),\n    processing_time_ms INTEGER,\n    \n    -- Context and state\n    conversation_context JSONB DEFAULT '{}',\n    user_state JSONB DEFAULT '{}',\n    session_data JSONB DEFAULT '{}',\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \n    INDEX idx_user_created (user_id, created_at),\n    INDEX idx_conversation_id (conversation_id),\n    INDEX idx_platform (platform),\n    INDEX idx_intent (intent_detected),\n    INDEX idx_created_at (created_at),\n    \n    FOREIGN KEY (user_id) REFERENCES {{table_prefix}}users(id) ON DELETE CASCADE\n);\n\nSELECT 'AI Chat Conversations table created successfully' as result;"
    },
    {
      "id": "ai-chat-knowledge-base",
      "name": "Create Knowledge Base Table",
      "description": "Knowledge base voor AI responses en training data",
      "type": "sql",
      "run_order": 3,
      "content": "-- AI Knowledge Base Table\nCREATE TABLE IF NOT EXISTS {{table_prefix}}knowledge_base (\n    id BIGINT AUTO_INCREMENT PRIMARY KEY,\n    \n    -- Content\n    title VARCHAR(200),\n    content TEXT NOT NULL,\n    content_type VARCHAR(30) DEFAULT 'text',\n    language VARCHAR(5) DEFAULT 'nl',\n    \n    -- Classification\n    category VARCHAR(50),\n    tags JSONB DEFAULT '[]',\n    topics JSONB DEFAULT '[]',\n    intent_patterns JSONB DEFAULT '[]',\n    \n    -- AI relevance\n    embedding_vector JSONB DEFAULT '{}',\n    relevance_score DECIMAL(5,4) DEFAULT 1.0,\n    usage_count INTEGER DEFAULT 0,\n    \n    -- Source and validation\n    source VARCHAR(100),\n    verified BOOLEAN DEFAULT false,\n    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    -- Status\n    is_active BOOLEAN DEFAULT true,\n    priority INTEGER DEFAULT 1,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \n    INDEX idx_category (category),\n    INDEX idx_language (language),\n    INDEX idx_active_priority (is_active, priority),\n    INDEX idx_tags (tags),\n    FULLTEXT idx_content_search (title, content)\n);\n\n-- Insert sample knowledge\nINSERT IGNORE INTO {{table_prefix}}knowledge_base (title, content, category, tags) VALUES \n('AI Assistant Greeting', 'Hoi! Ik ben je AI assistent. Hoe kan ik je vandaag helpen?', 'greetings', '[\"greeting\", \"welcome\"]'),\n('Privacy Information', 'Je privacy is belangrijk. Alle gesprekken worden veilig opgeslagen en niet gedeeld met derden.', 'privacy', '[\"privacy\", \"security\"]'),\n('Help Information', 'Ik kan je helpen met verschillende onderwerpen. Vraag me gewoon wat je wilt weten!', 'help', '[\"help\", \"support\"]');\n\nSELECT 'AI Knowledge Base table created successfully' as result;"
    },
    {
      "id": "ai-chat-processor-function",
      "name": "Deploy AI Chat Processor",
      "description": "Main AI chat processing function met OpenAI integratie",
      "type": "javascript",
      "run_order": 4,
      "dependencies": ["ai-chat-users", "ai-chat-conversations"],
      "content": "// Deploy AI Chat Processor Function\nconst functions = CloudBox.functions;\n\nasync function deployAIChatProcessor() {\n    console.log('Deploying AI Chat Processor...');\n    \n    const functionCode = `\nconst mysql = require('mysql2/promise');\n\n// Database configuration\nconst dbConfig = {\n    host: process.env.DB_HOST || 'localhost',\n    port: process.env.DB_PORT || 3306,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: '{{database_name}}',\n    ssl: false\n};\n\nasync function handler(req, res) {\n    const startTime = Date.now();\n    let connection;\n    \n    try {\n        const { message, userId, platform, attachments } = req.body;\n        \n        if (!message || !userId) {\n            return res.status(400).json({\n                success: false,\n                error: 'Message and userId are required'\n            });\n        }\n        \n        // Get database connection\n        connection = await mysql.createConnection(dbConfig);\n        \n        // Get or create user\n        let [users] = await connection.execute(\n            'SELECT * FROM {{table_prefix}}users WHERE id = ?',\n            [userId]\n        );\n        \n        let user = users[0];\n        if (!user) {\n            await connection.execute(\n                'INSERT INTO {{table_prefix}}users (id, name, preferred_platform) VALUES (?, ?, ?)',\n                [userId, 'Gebruiker', platform || 'web']\n            );\n            user = { id: userId, name: 'Gebruiker', preferred_platform: platform || 'web' };\n        }\n        \n        // Build AI system prompt\n        const systemPrompt = \\`Je bent een behulpzame AI assistent.\n        \nPERSOONLIJKHEID:\n        - Vriendelijk en behulpzaam\n        - Spreek {{default_language}} tenzij anders gevraagd\n        - Geef korte, nuttige antwoorden\n        \nGEBRUIKER:\n        - Naam: \\${user.name}\n        - Platform: \\${platform || 'web'}\n        - ID: \\${user.id}\n        \nReageer natuurlijk op het volgende bericht:\\`;\n        \n        // Mock AI response (replace with actual AI service)\n        const aiResponse = \\`Bedankt voor je bericht: \"\\${message}\". Ik ben hier om je te helpen!\\`;\n        \n        // Detect intent and sentiment\n        const intent = detectIntent(message);\n        const sentiment = analyzeSentiment(message);\n        \n        // Save conversation\n        const conversationId = \\`\\${userId}-\\${Date.now()}\\`;\n        await connection.execute(\n            \\`INSERT INTO {{table_prefix}}conversations \n             (conversation_id, user_id, platform, message_text, response_text, \n              intent_detected, sentiment_score, model_used, processing_time_ms)\n             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\\`,\n            [\n                conversationId,\n                userId,\n                platform || 'web',\n                message,\n                aiResponse,\n                intent,\n                sentiment,\n                '{{ai_model}}',\n                Date.now() - startTime\n            ]\n        );\n        \n        // Update user last active\n        await connection.execute(\n            'UPDATE {{table_prefix}}users SET last_active = NOW() WHERE id = ?',\n            [userId]\n        );\n        \n        res.json({\n            success: true,\n            response: aiResponse,\n            conversation_id: conversationId,\n            processing_time: Date.now() - startTime\n        });\n        \n    } catch (error) {\n        console.error('AI Chat processor error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message,\n            fallback_response: \"Sorry, er ging iets mis. Probeer het nog eens?\"\n        });\n    } finally {\n        if (connection) await connection.end();\n    }\n}\n\nfunction detectIntent(message) {\n    const lowerMessage = message.toLowerCase();\n    if (lowerMessage.includes('hoi') || lowerMessage.includes('hallo')) return 'greeting';\n    if (lowerMessage.includes('help') || lowerMessage.includes('hulp')) return 'help';\n    if (lowerMessage.includes('bedankt') || lowerMessage.includes('dank')) return 'thanks';\n    return 'general';\n}\n\nfunction analyzeSentiment(message) {\n    const lowerMessage = message.toLowerCase();\n    let score = 0;\n    \n    const positiveWords = ['goed', 'fijn', 'blij', 'geweldig', 'super', 'bedankt'];\n    const negativeWords = ['slecht', 'verdrietig', 'boos', 'probleem', 'fout'];\n    \n    positiveWords.forEach(word => {\n        if (lowerMessage.includes(word)) score += 0.2;\n    });\n    \n    negativeWords.forEach(word => {\n        if (lowerMessage.includes(word)) score -= 0.2;\n    });\n    \n    return Math.max(-1, Math.min(1, score));\n}\n\nmodule.exports = { handler };\n`;\n    \n    await functions.deploy('ai-chat-processor', {\n        runtime: 'nodejs18',\n        port: {{chat_port}},\n        memory: '512MB',\n        code: functionCode,\n        environment: {\n            DB_HOST: 'database',\n            DB_PORT: '3306',\n            DB_USER: 'cloudbox',\n            DB_PASSWORD: process.env.DB_PASSWORD || '',\n            AI_API_KEY: '{{ai_api_key}}'\n        }\n    });\n    \n    console.log('AI Chat Processor deployed successfully on port {{chat_port}}');\n    return { success: true, function: 'ai-chat-processor', port: {{chat_port}} };\n}\n\nreturn deployAIChatProcessor();"
    },
    {
      "id": "ai-chat-webhooks",
      "name": "Setup AI Chat Webhooks",
      "description": "Webhook configuratie voor externe chat platforms",
      "type": "setup",
      "run_order": 5,
      "dependencies": ["ai-chat-processor-function"],
      "content": "# AI Chat Webhooks Setup\nCREATE_WEBHOOK /api/chat POST ai-chat-processor\nCREATE_WEBHOOK /webhooks/whatsapp GET,POST ai-chat-processor\nCREATE_WEBHOOK /webhooks/telegram POST ai-chat-processor\nCREATE_WEBHOOK /webhooks/discord POST ai-chat-processor"
    }
  ],
  "default_variables": {
    "table_prefix": "",
    "database_name": "ai_chat_db",
    "chat_port": "3001",
    "default_language": "Nederlands",
    "ai_model": "gpt-3.5-turbo",
    "ai_api_key": "your-openai-api-key-here"
  }
}