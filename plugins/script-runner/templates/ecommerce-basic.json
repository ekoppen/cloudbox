{
  "name": "E-commerce Backend",
  "description": "Complete database schema voor e-commerce platforms met producten, bestellingen en betalingen",
  "category": "ecommerce",
  "framework": "universal",
  "scripts": [
    {
      "id": "ecommerce-products",
      "name": "Create Products Schema",
      "description": "Product catalog en inventory management",
      "type": "sql",
      "run_order": 1,
      "content": "-- Products and Categories\nCREATE TABLE IF NOT EXISTS {{table_prefix}}categories (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    slug VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT,\n    parent_id INTEGER NULL,\n    image_url VARCHAR(500),\n    sort_order INTEGER DEFAULT 0,\n    is_active BOOLEAN DEFAULT true,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    INDEX idx_categories_slug (slug),\n    INDEX idx_categories_parent (parent_id),\n    INDEX idx_categories_active (is_active),\n    \n    FOREIGN KEY (parent_id) REFERENCES {{table_prefix}}categories(id) ON DELETE SET NULL\n);\n\nCREATE TABLE IF NOT EXISTS {{table_prefix}}products (\n    id SERIAL PRIMARY KEY,\n    sku VARCHAR(100) UNIQUE NOT NULL,\n    name VARCHAR(200) NOT NULL,\n    slug VARCHAR(200) UNIQUE NOT NULL,\n    description TEXT,\n    short_description TEXT,\n    \n    -- Pricing\n    price DECIMAL(10,2) NOT NULL,\n    compare_price DECIMAL(10,2) NULL,\n    cost_price DECIMAL(10,2) NULL,\n    \n    -- Inventory\n    track_inventory BOOLEAN DEFAULT true,\n    inventory_quantity INTEGER DEFAULT 0,\n    low_stock_threshold INTEGER DEFAULT 5,\n    \n    -- Physical properties\n    weight DECIMAL(8,3) NULL,\n    dimensions JSONB DEFAULT '{}',\n    \n    -- SEO and meta\n    meta_title VARCHAR(200),\n    meta_description TEXT,\n    \n    -- Status\n    is_active BOOLEAN DEFAULT true,\n    is_featured BOOLEAN DEFAULT false,\n    \n    -- Media\n    images JSONB DEFAULT '[]',\n    \n    -- Additional data\n    attributes JSONB DEFAULT '{}',\n    tags JSONB DEFAULT '[]',\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    INDEX idx_products_sku (sku),\n    INDEX idx_products_slug (slug),\n    INDEX idx_products_active (is_active),\n    INDEX idx_products_featured (is_featured),\n    INDEX idx_products_price (price),\n    FULLTEXT idx_products_search (name, description)\n);\n\n-- Product Categories Junction\nCREATE TABLE IF NOT EXISTS {{table_prefix}}product_categories (\n    product_id INTEGER,\n    category_id INTEGER,\n    \n    PRIMARY KEY (product_id, category_id),\n    FOREIGN KEY (product_id) REFERENCES {{table_prefix}}products(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES {{table_prefix}}categories(id) ON DELETE CASCADE\n);\n\nSELECT 'E-commerce Products schema created successfully' as result;"
    },
    {
      "id": "ecommerce-customers",
      "name": "Create Customers Schema", 
      "description": "Customer accounts en profile management",
      "type": "sql",
      "run_order": 2,
      "content": "-- Customers\nCREATE TABLE IF NOT EXISTS {{table_prefix}}customers (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    \n    -- Personal info\n    first_name VARCHAR(100),\n    last_name VARCHAR(100),\n    phone VARCHAR(20),\n    date_of_birth DATE,\n    \n    -- Account status\n    email_verified BOOLEAN DEFAULT false,\n    email_verified_at TIMESTAMP NULL,\n    is_active BOOLEAN DEFAULT true,\n    \n    -- Customer data\n    customer_group VARCHAR(50) DEFAULT 'regular',\n    total_spent DECIMAL(10,2) DEFAULT 0,\n    order_count INTEGER DEFAULT 0,\n    \n    -- Preferences\n    marketing_consent BOOLEAN DEFAULT false,\n    preferred_language VARCHAR(5) DEFAULT 'nl',\n    \n    -- Metadata\n    notes TEXT,\n    tags JSONB DEFAULT '[]',\n    \n    last_login TIMESTAMP NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    INDEX idx_customers_email (email),\n    INDEX idx_customers_active (is_active),\n    INDEX idx_customers_group (customer_group),\n    INDEX idx_customers_total_spent (total_spent)\n);\n\n-- Customer Addresses\nCREATE TABLE IF NOT EXISTS {{table_prefix}}customer_addresses (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    \n    -- Address info\n    type ENUM('billing', 'shipping') DEFAULT 'shipping',\n    first_name VARCHAR(100),\n    last_name VARCHAR(100),\n    company VARCHAR(100),\n    \n    address_line_1 VARCHAR(200) NOT NULL,\n    address_line_2 VARCHAR(200),\n    city VARCHAR(100) NOT NULL,\n    state VARCHAR(100),\n    postal_code VARCHAR(20) NOT NULL,\n    country VARCHAR(2) NOT NULL DEFAULT 'NL',\n    \n    phone VARCHAR(20),\n    \n    -- Status\n    is_default BOOLEAN DEFAULT false,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    INDEX idx_addresses_customer (customer_id),\n    INDEX idx_addresses_type (type),\n    INDEX idx_addresses_default (customer_id, is_default),\n    \n    FOREIGN KEY (customer_id) REFERENCES {{table_prefix}}customers(id) ON DELETE CASCADE\n);\n\nSELECT 'E-commerce Customers schema created successfully' as result;"
    },
    {
      "id": "ecommerce-orders",
      "name": "Create Orders Schema",
      "description": "Order management en payment tracking",
      "type": "sql", 
      "run_order": 3,
      "dependencies": ["ecommerce-customers", "ecommerce-products"],
      "content": "-- Orders\nCREATE TABLE IF NOT EXISTS {{table_prefix}}orders (\n    id SERIAL PRIMARY KEY,\n    order_number VARCHAR(50) UNIQUE NOT NULL,\n    customer_id INTEGER,\n    \n    -- Order status\n    status ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded') DEFAULT 'pending',\n    payment_status ENUM('pending', 'paid', 'failed', 'refunded', 'partial') DEFAULT 'pending',\n    fulfillment_status ENUM('pending', 'processing', 'shipped', 'delivered') DEFAULT 'pending',\n    \n    -- Financial\n    subtotal DECIMAL(10,2) NOT NULL,\n    tax_amount DECIMAL(10,2) DEFAULT 0,\n    shipping_amount DECIMAL(10,2) DEFAULT 0,\n    discount_amount DECIMAL(10,2) DEFAULT 0,\n    total_amount DECIMAL(10,2) NOT NULL,\n    \n    -- Currency\n    currency VARCHAR(3) DEFAULT 'EUR',\n    \n    -- Customer info (snapshot)\n    customer_email VARCHAR(255),\n    customer_phone VARCHAR(20),\n    \n    -- Addresses\n    billing_address JSONB,\n    shipping_address JSONB,\n    \n    -- Shipping\n    shipping_method VARCHAR(100),\n    tracking_number VARCHAR(100),\n    \n    -- Metadata\n    notes TEXT,\n    tags JSONB DEFAULT '[]',\n    \n    -- Timestamps\n    ordered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    shipped_at TIMESTAMP NULL,\n    delivered_at TIMESTAMP NULL,\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    INDEX idx_orders_number (order_number),\n    INDEX idx_orders_customer (customer_id),\n    INDEX idx_orders_status (status),\n    INDEX idx_orders_payment_status (payment_status),\n    INDEX idx_orders_ordered_at (ordered_at),\n    \n    FOREIGN KEY (customer_id) REFERENCES {{table_prefix}}customers(id) ON DELETE SET NULL\n);\n\n-- Order Items\nCREATE TABLE IF NOT EXISTS {{table_prefix}}order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    product_id INTEGER,\n    \n    -- Product snapshot\n    product_sku VARCHAR(100),\n    product_name VARCHAR(200) NOT NULL,\n    \n    -- Pricing\n    unit_price DECIMAL(10,2) NOT NULL,\n    quantity INTEGER NOT NULL,\n    total_price DECIMAL(10,2) NOT NULL,\n    \n    -- Product data snapshot\n    product_data JSONB DEFAULT '{}',\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \n    INDEX idx_order_items_order (order_id),\n    INDEX idx_order_items_product (product_id),\n    \n    FOREIGN KEY (order_id) REFERENCES {{table_prefix}}orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (product_id) REFERENCES {{table_prefix}}products(id) ON DELETE SET NULL\n);\n\nSELECT 'E-commerce Orders schema created successfully' as result;"
    },
    {
      "id": "ecommerce-payments",
      "name": "Create Payments Schema",
      "description": "Payment processing en transaction history",
      "type": "sql",
      "run_order": 4,
      "dependencies": ["ecommerce-orders"],
      "content": "-- Payments\nCREATE TABLE IF NOT EXISTS {{table_prefix}}payments (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    \n    -- Payment details\n    payment_method VARCHAR(50) NOT NULL, -- card, bank_transfer, paypal, etc\n    payment_provider VARCHAR(50), -- stripe, mollie, paypal, etc\n    \n    -- Transaction info\n    transaction_id VARCHAR(255),\n    provider_transaction_id VARCHAR(255),\n    \n    -- Financial\n    amount DECIMAL(10,2) NOT NULL,\n    currency VARCHAR(3) DEFAULT 'EUR',\n    \n    -- Status\n    status ENUM('pending', 'processing', 'completed', 'failed', 'cancelled', 'refunded') DEFAULT 'pending',\n    \n    -- Provider response\n    provider_response JSONB,\n    failure_reason TEXT,\n    \n    -- Metadata\n    metadata JSONB DEFAULT '{}',\n    \n    -- Timestamps\n    processed_at TIMESTAMP NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    INDEX idx_payments_order (order_id),\n    INDEX idx_payments_transaction (transaction_id),\n    INDEX idx_payments_provider_transaction (provider_transaction_id),\n    INDEX idx_payments_status (status),\n    INDEX idx_payments_method (payment_method),\n    \n    FOREIGN KEY (order_id) REFERENCES {{table_prefix}}orders(id) ON DELETE CASCADE\n);\n\n-- Shopping Cart\nCREATE TABLE IF NOT EXISTS {{table_prefix}}cart_items (\n    id SERIAL PRIMARY KEY,\n    session_id VARCHAR(255),\n    customer_id INTEGER NULL,\n    product_id INTEGER NOT NULL,\n    \n    quantity INTEGER NOT NULL DEFAULT 1,\n    unit_price DECIMAL(10,2) NOT NULL,\n    \n    -- Product options/variants\n    product_options JSONB DEFAULT '{}',\n    \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    INDEX idx_cart_session (session_id),\n    INDEX idx_cart_customer (customer_id),\n    INDEX idx_cart_product (product_id),\n    INDEX idx_cart_updated (updated_at),\n    \n    FOREIGN KEY (customer_id) REFERENCES {{table_prefix}}customers(id) ON DELETE CASCADE,\n    FOREIGN KEY (product_id) REFERENCES {{table_prefix}}products(id) ON DELETE CASCADE\n);\n\nSELECT 'E-commerce Payments schema created successfully' as result;"
    },
    {
      "id": "ecommerce-api-functions",
      "name": "Deploy E-commerce API Functions",
      "description": "REST API functions voor e-commerce operations",
      "type": "javascript",
      "run_order": 5,
      "dependencies": ["ecommerce-products", "ecommerce-customers", "ecommerce-orders"],
      "content": "// Deploy E-commerce API Functions\nconst functions = CloudBox.functions;\n\nasync function deployEcommerceAPI() {\n    console.log('Deploying E-commerce API functions...');\n    \n    // Products API\n    await functions.deploy('ecommerce-products-api', {\n        runtime: 'nodejs18',\n        port: {{products_port}},\n        memory: '256MB',\n        environment: {\n            DB_NAME: '{{database_name}}',\n            TABLE_PREFIX: '{{table_prefix}}'\n        }\n    });\n    \n    // Customers API\n    await functions.deploy('ecommerce-customers-api', {\n        runtime: 'nodejs18',\n        port: {{customers_port}},\n        memory: '256MB',\n        environment: {\n            DB_NAME: '{{database_name}}',\n            TABLE_PREFIX: '{{table_prefix}}',\n            JWT_SECRET: '{{jwt_secret}}'\n        }\n    });\n    \n    // Orders API\n    await functions.deploy('ecommerce-orders-api', {\n        runtime: 'nodejs18',\n        port: {{orders_port}},\n        memory: '512MB',\n        environment: {\n            DB_NAME: '{{database_name}}',\n            TABLE_PREFIX: '{{table_prefix}}'\n        }\n    });\n    \n    // Payments API\n    await functions.deploy('ecommerce-payments-api', {\n        runtime: 'nodejs18',\n        port: {{payments_port}},\n        memory: '256MB',\n        environment: {\n            DB_NAME: '{{database_name}}',\n            TABLE_PREFIX: '{{table_prefix}}',\n            STRIPE_SECRET_KEY: '{{stripe_secret_key}}',\n            MOLLIE_API_KEY: '{{mollie_api_key}}'\n        }\n    });\n    \n    console.log('E-commerce API functions deployed successfully');\n    return { \n        success: true, \n        functions: [\n            { name: 'ecommerce-products-api', port: {{products_port}} },\n            { name: 'ecommerce-customers-api', port: {{customers_port}} },\n            { name: 'ecommerce-orders-api', port: {{orders_port}} },\n            { name: 'ecommerce-payments-api', port: {{payments_port}} }\n        ]\n    };\n}\n\nreturn deployEcommerceAPI();"
    }
  ],
  "default_variables": {
    "table_prefix": "",
    "database_name": "ecommerce_db",\n    "products_port": "3001",\n    "customers_port": "3002",\n    "orders_port": "3003",\n    "payments_port": "3004",\n    "jwt_secret": "your-jwt-secret-here",\n    "stripe_secret_key": "sk_test_...",\n    "mollie_api_key": "test_..."\n  }\n}