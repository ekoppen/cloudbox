services:
  postgres:
    image: postgres:15-alpine
    container_name: cloudbox-postgres
    environment:
      POSTGRES_DB: cloudbox
      POSTGRES_USER: cloudbox
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudbox -d cloudbox"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  backend:
    image: golang:1.21-alpine
    container_name: cloudbox-backend
    working_dir: /app
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=8080
      - ENVIRONMENT=development
      - ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
      - MASTER_KEY=a1b2c3d4e5f6789012345678901234567890abcdef1234567890123456789012
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: ["sh", "-c", "mkdir -p /app/uploads && go mod tidy && ./wait-for-services.sh && go run main.go"]

  frontend:
    image: node:20-alpine
    container_name: cloudbox-frontend
    working_dir: /app
    environment:
      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8080}
      - NODE_ENV=development
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    command: ["sh", "-c", "npm install && npm run dev -- --host 0.0.0.0 --port 3000"]

  redis:
    image: redis:7-alpine
    container_name: cloudbox-redis
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  redis_data: