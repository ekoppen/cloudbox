services:
  postgres:
    image: postgres:15-alpine
    container_name: cloudbox-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-cloudbox}
      POSTGRES_USER: ${DB_USER:-cloudbox}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cloudbox_secure_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cloudbox} -d ${DB_NAME:-cloudbox}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: cloudbox-redis
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudbox-backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN:-720h}
      - SERVER_PORT=${SERVER_PORT:-8080}
      - APP_ENV=${APP_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10MB}
      - UPLOAD_DIR=${UPLOAD_DIR:-./uploads}
      - REDIS_URL=${REDIS_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - MASTER_KEY=${MASTER_KEY}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8080}
    container_name: cloudbox-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

volumes:
  postgres_data:
  redis_data: